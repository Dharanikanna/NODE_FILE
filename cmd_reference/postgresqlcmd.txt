

#####################################################################

Handle port number error (port(5432) number already in use)

open cmd as administrator

netstat -ano
taskkill /PID <PID> /F

#####################################################################

Start postgresql server in cmd

D:\database\PostgreSQL\12\bin

--> pg_ctl -D "D:\database\PostgreSQL\12\data" start

You need to be inside "C:\Program Files\PostgreSQL\11.4\bin" 
directory to execute the above command.

--> psql --version
--> psql --port=5432 --host=localhost --dbname=nodeapi --username=postgres 
(or) 
--> psql -U postgres

-- heroku connection : psql -h ec2-3-232-22-121.compute-1.amazonaws.com  -U hcudbjagppfwtn d7ur26qmph50fo
pass : b2d0dbb86602ddb41070f948e897dc28a233a8297946091a0b4b04d0063b7749

reference : https://stackoverflow.com/questions/20775490/how-to-create-or-manage-heroku-postgres-database-instance

#####################################################################

Show databases using below cmd

--> \n
   (or)
--> \n+ (for more information)
https://www.postgresqltutorial.com/postgresql-show-databases/

#####################################################################

Select database

--> \c nodeapi;

https://www.tutorialspoint.com/postgresql/postgresql_select_database.htm

#####################################################################

Show tables on the selected database

--> \dt (or) \dt+
--> SELECT * FROM pg_catalog.pg_tables WHERE schemaname != 'pg_catalog' AND schemaname != 'information_schema';


#####################################################################

Create table

--> create table developers(name varchar(20),projects text,id int);
		
				(or)

create table with auto sequence id
 
--> create table developer(name varchar(20),projects text,id serial primary key);

or 

 create table users(email varchar(20),password varchar(20),id serial primary key);

 or 
 
 create table users(id serial primary key,email varchar(50),password varchar(60));


#####################################################################

How to alter sequence of id

-->alter sequence developer_id_seq restart with 1;

#####################################################################

#####################################################################

Insert data into a table

insert into developers values('ABC','Project-A',1);
insert into developers values('ABC','Project-C',2);
insert into developers values('DEF','Project-D',3);
insert into developers values('GHI','Project-G',4);
insert into developers values('JKL','Project-K',5);
insert into developers values('JKL','Project-L',6);
insert into developers values('MNO','Project-O',7);
insert into developers values('PQR','Project-P',8);
insert into developers values('PQR','Project-Q',9);
insert into developers values('PQR','Project-R',10);
insert into developers values('STU','Project-U',11);
insert into developers values('VWX','Project-V',12);
insert into developers values('YZ','Project-Y',13);

		(or)
To gerenerate id sequencely

insert into developer('name', 'projects') values('ABC','Project-A'), ('ABC','Project-C'), ('DEF','Project-D'),('GHI','Project-G'),('JKL','Project-K'),('JKL','Project-L'),('MNO','Project-O'),('PQR','Project-P'),('PQR','Project-Q'),('PQR','Project-R'),('STU','Project-U'),('VWX','Project-V'),('YZ','Project-Y');

INSERT 0 1

#####################################################################

Show data in table

select * from developers;

#####################################################################

update table

update developers set age=50 where name='PQR';

#####################################################################

Delete data from table

delete from dummy_table where age=65;

#####################################################################


csv to postgres table 

create table healthcare(id serial primary key, Pregnancies varchar,Glucose varchar,BloodPressure varchar, SkinThickness varchar,Insulin varchar, BMI varchar, DiabetesPedigreeFunction varchar,Age varchar,Outcome varchar);

copy healthcare(Pregnancies,Glucose,BloodPressure,SkinThickness, Insulin, BMI, DiabetesPedigreeFunction,Age,Outcome)From 'D:\MASTERS_DATA_SCINETIST\MASTER_COURSE\MACHINE_LEARNING\Demo Datasets\Lesson 9\pima-indians-diabetes.csv' delimiter ',' csv header;
// heroku
-c \copy healthcare(Pregnancies,Glucose,BloodPressure,SkinThickness, Insulin, BMI, DiabetesPedigreeFunction,Age,Outcome)From 'D:\MASTERS_DATA_SCINETIST\MASTER_COURSE\MACHINE_LEARNING\Demo Datasets\Lesson 9\pima-indians-diabetes.csv' delimiter ',' csv header;

--> Another table

create table diabetic(id serial primary key, encounter_id varchar,patient_nbr varchar,race varchar, gender varchar,age varchar, weight varchar, diag_1 varchar, diag_2 varchar, diag_3 varchar, number_diagnoses varchar,max_glu_serum varchar, A1Cresult varchar, metformin varchar,	repaglinide varchar,nateglinide varchar,chlorpropamide varchar);
copy diabetic(encounter_id ,patient_nbr ,race , gender ,age , weight , diag_1 , diag_2 , diag_3 , number_diagnoses ,max_glu_serum , A1Cresult , metformin ,repaglinide ,nateglinide ,chlorpropamide) FROM 'D:\MASTERS_DATA_SCINETIST\MASTER_COURSE\MACHINE_LEARNING\Demo Datasets\Lesson 9\diabetic_data.csv' delimiter ',' csv header;

Columns
load_no, container_no, size, ssl, port_terminal, export_booking_no, eta, lfd, custom, freight, pickup_status, gate_out_date, scheduled_delivery_date, Actual_delivery_date, empty_ready_for_pu, empty_return_pu_date, delivery_location, Customer, cc, load_content, notes, status


"LOAD NO","CONTAINER NO","SIZE","SSL","PORT TERMINAL","EXPORT BOOKING NO","ETA","LFD","CUSTOMS","FREIGHT","PICK-UP STATUS","GATE OUT DATE","SCHEDULED DELIVERY DATE","ACTUAL DELIVERY DATE","EMPTY READY FOR P/U","EMPTY RETURN P/U DATE","DELIVERY LOCATION","CUSTOMER","CC","Load Content","NOTES"

create table liveload("LOAD NO" varchar,"CONTAINER NO" varchar,"SIZE" varchar,"SSL" varchar,"PORT TERMINAL" varchar,"EXPORT BOOKING NO" varchar,"ETA" varchar,"LFD" varchar,"CUSTOMS" varchar,"FREIGHT" varchar,"PICK-UP STATUS" varchar,"GATE OUT DATE" varchar,"SCHEDULED DELIVERY DATE" varchar,"ACTUAL DELIVERY DATE" varchar,"EMPTY READY FOR P/U" varchar,"EMPTY RETURN P/U DATE" varchar,"DELIVERY LOCATION" varchar,"CUSTOMER" varchar,"CC" varchar,"Load Content" varchar,"NOTES" varchar);
copy liveload("LOAD NO","CONTAINER NO","SIZE","SSL","PORT TERMINAL","EXPORT BOOKING NO","ETA","LFD","CUSTOMS","FREIGHT","PICK-UP STATUS","GATE OUT DATE","SCHEDULED DELIVERY DATE","ACTUAL DELIVERY DATE","EMPTY READY FOR P/U","EMPTY RETURN P/U DATE","DELIVERY LOCATION","CUSTOMER","CC","Load Content","NOTES") From 'E:\SQUARELY\NODE_PROJECT\NODE_FILE\liveloaddemo.csv' delimiter ',' csv header;;


create table liveload(load_no varchar, container_no varchar, size varchar, ssl varchar, port_terminal varchar, export_booking_no varchar, eta varchar, lfd varchar, custom varchar, freight varchar, pickup_status varchar, gate_out_date varchar, scheduled_delivery_date varchar, Actual_delivery_date varchar, empty_ready_for_pu varchar, empty_return_pu_date varchar, delivery_location varchar, Customer varchar, cc varchar, load_content varchar, notes varchar, status varchar);
copy liveload(load_no, container_no, size, ssl, port_terminal, export_booking_no, eta, lfd, custom, freight, pickup_status, gate_out_date, scheduled_delivery_date, Actual_delivery_date, empty_ready_for_pu, empty_return_pu_date, delivery_location, Customer, cc, load_content, notes, status) From 'E:\SQUARELY\NODE_PROJECT\NODE_FILE\liveload.csv' delimiter ',' csv header;;

create table archive(load_no varchar, container_no varchar, size varchar, ssl varchar, port_terminal varchar, export_booking_no varchar, eta varchar, lfd varchar, custom varchar, freight varchar, pickup_status varchar, gate_out_date varchar, scheduled_delivery_date varchar, Actual_delivery_date varchar, empty_ready_for_pu varchar, empty_return_pu_date varchar, delivery_location varchar, Customer varchar, cc varchar, notes varchar, status varchar);
copy archive(load_no, container_no, size, ssl, port_terminal, export_booking_no, eta, lfd, custom, freight, pickup_status, gate_out_date, scheduled_delivery_date, Actual_delivery_date, empty_ready_for_pu, empty_return_pu_date, delivery_location, Customer, cc, notes, status) From 'E:\SQUARELY\NODE_PROJECT\NODE_FILE\Archive.csv' delimiter ',' csv header;;


create table archive("LOAD NO" varchar,"CONTAINER NO" varchar,"SIZE" varchar,"SSL" varchar,"PORT TERMINAL" varchar,"EXPORT BOOKING NO" varchar,"ETA" varchar,"LFD" varchar,"CUSTOMS" varchar,"FREIGHT" varchar,"PICK-UP STATUS" varchar,"GATE OUT DATE" varchar,"SCHEDULED DELIVERY DATE" varchar,"ACTUAL DELIVERY DATE" varchar,"EMPTY READY FOR P/U" varchar,"EMPTY RETURN P/U DATE" varchar,"DELIVERY LOCATION" varchar,"CUSTOMER" varchar,"CC" varchar,"NOTES" varchar);
copy archive("LOAD NO","CONTAINER NO","SIZE","SSL","PORT TERMINAL","EXPORT BOOKING NO","ETA","LFD","CUSTOMS","FREIGHT","PICK-UP STATUS","GATE OUT DATE","SCHEDULED DELIVERY DATE","ACTUAL DELIVERY DATE","EMPTY READY FOR P/U","EMPTY RETURN P/U DATE","DELIVERY LOCATION","CUSTOMER","CC","NOTES") From 'E:\SQUARELY\NODE_PROJECT\NODE_FILE\Archive.csv' delimiter ',' csv header;


#####################################################################


reference link : 
https://www.enterprisedb.com/postgres-tutorials/postgresql-query-introduction-explanation-and-50-examples
https://stackabuse.com/using-postgresql-with-nodejs-and-node-postgres/

Good psql and node --> https://www.split.io/blog/rest-api-node-postgres/

Complete api building reference --. https://blog.logrocket.com/nodejs-expressjs-postgresql-crud-rest-api-example/


Testing reference --> https://codeforgeek.com/unit-testing-nodejs-application-using-mocha/

